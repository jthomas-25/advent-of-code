using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace Puzzle14
{
    class Program
    {
        internal const int MAP_WIDTH = 101;
        internal const int MAP_HEIGHT = 103;
        internal const int MAP_CENTERX = MAP_WIDTH / 2;
        internal const int MAP_CENTERY = MAP_HEIGHT / 2;
        static int[,] numRobotsPerTile;
        
        public static void Main(string[] args)
        {
            string filename = args[0];

            List<Robot> robots = new List<Robot>();
            numRobotsPerTile = new int[MAP_HEIGHT, MAP_WIDTH];
            foreach (string line in File.ReadLines(filename))
            {
                string pattern = @"-?\d+";
                MatchCollection matches = Regex.Matches(line, pattern);
                int x = int.Parse(matches[0].Value);
                int y = int.Parse(matches[1].Value);
                int dx = int.Parse(matches[2].Value);
                int dy = int.Parse(matches[3].Value);
                robots.Add(new Robot(x, y, dx, dy));
                numRobotsPerTile[y, x]++;
            }

            Part1(robots);
            Reset(robots);
            Part2(robots);
        }

        static void Part1(List<Robot> robots)
        {
            for (int seconds = 1; seconds <= 100; seconds++)
            {
                Step(robots);
            }

            int safetyFactor = 1;
            foreach (IGrouping<int, Robot> group in robots.GroupBy(robot => robot.GetQuadrant()))
            {
                if (group.Key > 0)
                {
                    // count the number of robots in each quadrant
                    safetyFactor *= group.Count();
                }
            }
            Console.WriteLine(safetyFactor);
        }

        static void Part2(List<Robot> robots)
        {
            /*
             * All of the robots return to their starting positions
             * after [map_width * map_height] seconds have elapsed.
             * 
             * For example, the robots on the small map loop after 77 (11 * 7) seconds,
             * while the robots on the actual map loop after 10403 (101 * 103) seconds.
             * 
             * You can verify this for the small map with the following code:
             * 
             * Console.WriteLine("Initial state:");
             * ShowMap();
             * int loopStart = MAP_WIDTH * MAP_HEIGHT;
             * for (int seconds = 1; seconds <= loopStart; seconds++)
             * {
             *     Step(robots);
             * }
             * Console.WriteLine($"After {loopStart} seconds:");
             * ShowMap();
             * 
             * Therefore, the picture of the tree will first appear sometime before then.
             * However, the Easter egg won't appear on the small map.
             * 
             * It was easier to see the map and find the tree after redirecting all 10403
             * unique outputs to a file, although the file size was quite large (> 100 MB)!
             * 
             * Here's how the map will look after 7603 seconds have passed:
             * 
             * ...................................................^.................................................
             * .....................................................................................................
             * .....................................................................................................
             * ..............................................................................................^......
             * .........................^............^................^............^^...............................
             * ..........................................................................^..........^...^...........
             * ...........................^.........................................................................
             * .........................^...........^.........................................^.....................
             * ..........................................................^.................^.................^......
             * ..............................................................^......................................
             * .................................^..................................................^................
             * .........^.................................................................^.........................
             * ..............................................................^......................................
             * ..........................^..............................................^^..........................
             * ..^....^..................^..................^....^..................................................
             * .....................................................................................................
             * .....................................................................................................
             * ....................................................^................................................
             * ...^......^..........................................................................................
             * .....................................................................................................
             * ^....................................................................................................
             * ....^.^...............................................................................^..............
             * .........................^...........................................................................
             * ..........^..........................................................................^....^..........
             * .................^...................................................................................
             * .....................^...............................................................................
             * .........................................................................................^...........
             * ............................^..................................^..................^..................
             * ............................^........................................................................
             * ..........................................^..........................................................
             * .............^..................................................................^....................
             * ....................................................^................................................
             * ......................^..........................................................^.^......^.........^
             * ..........................^......................................^..........................^........
             * .....................................................................................................
             * ..............^......................................................................................
             * ..................................^...............................................^..................
             * ........................^..........^.................................................................
             * .......^.........................^...^...............................................................
             * .....................................................................................................
             * ......................................^.........^....................................................
             * ...................................................................^.................................
             * ....................^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.......................^..........................
             * ^...................^.............................^.................................................^
             * ..^.................^.............................^......^...........................................
             * ....................^.............................^..................................................
             * ....................^.............................^..........................................^.......
             * ................^...^..............^..............^..................................................
             * .^..................^.............^^^.............^..................................................
             * ....................^............^^^^^............^........................................^.........
             * .......^............^...........^^^^^^^...........^..................................................
             * ....................^..........^^^^^^^^^..........^....^....................................^........
             * ....................^............^^^^^............^..................................................
             * ......^........^....^...........^^^^^^^...........^..................................................
             * ....................^..........^^^^^^^^^..........^.............................^....................
             * ....................^.........^^^^^^^^^^^.........^..........................................^.......
             * ....................^........^^^^^^^^^^^^^........^..................................................
             * ..................^.^..........^^^^^^^^^..........^..................................................
             * ....................^.........^^^^^^^^^^^.........^.....^.......................................^....
             * ....................^........^^^^^^^^^^^^^........^..................................^...............
             * ....................^.......^^^^^^^^^^^^^^^.......^..................................................
             * ....................^......^^^^^^^^^^^^^^^^^......^..................................................
             * ....................^........^^^^^^^^^^^^^........^..................................................
             * ....................^.......^^^^^^^^^^^^^^^.......^..................................................
             * .................^..^......^^^^^^^^^^^^^^^^^......^..................................................
             * ....................^.....^^^^^^^^^^^^^^^^^^^.....^..................................................
             * ..........^.........^....^^^^^^^^^^^^^^^^^^^^^....^.........................................^........
             * ................^...^.............^^^.............^...........................^.................^....
             * ....................^.............^^^.............^..........^.......................................
             * ....................^.............^^^.............^......^...........................................
             * ....................^.............................^............................................^.....
             * ....................^.............................^..................................................
             * ....................^.............................^..................................................
             * ....................^.............................^.............................^....................
             * ....................^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^.........^.................^......................
             * ..................................................................^..................................
             * ..........^..........................................................................................
             * .............................^...........................................^...........................
             * .....................................................................................................
             * ....^^...............................................................................................
             * .................................................................................^................^.^
             * .......................^...............................................^.............................
             * .............................^.......................................................................
             * ...............^.....................................................^^..............................
             * .....................................................................................................
             * ......................^.........................^..................................^......^..........
             * ................................^...................................................................^
             * .^....................................................................^..............................
             * ...............^.....................................................................................
             * .....................................................................................................
             * .....................................................................^..............^................
             * ..........................................................................................^..........
             * ....................................................................................................^
             * .......................................................^.............................................
             * ...............^.....................................................................................
             * ..........^..........................................................................................
             * .....................................................................................................
             * ...............^.....................................................................................
             * ....^...................^......................................................................^.....
             * .....................^...............................................................................
             * .........................................................^......................^....................
             * ............................^..............................^...................................^.....
             * .......................................................................^.........................^...
             */
            int fewestSecondsToDisplayTree = 7603;
            for (int seconds = 1; seconds <= fewestSecondsToDisplayTree; seconds++)
            {
                Step(robots);
            }
            Console.WriteLine($"After {fewestSecondsToDisplayTree} seconds:");
            ShowMap();
        }

        static void Step(List<Robot> robots)
        {
            foreach (Robot robot in robots)
            {
                numRobotsPerTile[robot.GetY(), robot.GetX()]--;
                robot.Move();
                numRobotsPerTile[robot.GetY(), robot.GetX()]++;
            }
        }

        static void ShowMap()
        {
            for (int y = 0; y < MAP_HEIGHT; y++)
            {
                char[] row = new char[MAP_WIDTH];
                for (int x = 0; x < MAP_WIDTH; x++)
                {
                    int pop = numRobotsPerTile[y, x];
                    row[x] = (pop > 0) ? '^' : '.';
                }
                Console.WriteLine(row);
            }
        }

        static void Reset(List<Robot> robots)
        {
            foreach (Robot robot in robots)
            {
                numRobotsPerTile[robot.GetY(), robot.GetX()]--;
                robot.Reset();
                numRobotsPerTile[robot.GetY(), robot.GetX()]++;
            }
        }
    }

    class Robot
    {
        int startX;
        int startY;
        int x;
        int y;
        int dx;
        int dy;

        internal Robot(int x, int y, int dx, int dy)
        {
            startX = x;
            startY = y;
            this.x = x;
            this.y = y;
            this.dx = dx;
            this.dy = dy;
        }

        internal int GetX() { return x; }

        internal int GetY() { return y; }

        internal void Reset()
        {
            x = startX;
            y = startY;
        }

        internal void Move()
        {
            x += dx;
            // if went past right side
            if (x > Program.MAP_WIDTH - 1)
            {
                // teleport to the left
                x -= Program.MAP_WIDTH;
            }
            // if went past left side
            else if (x < 0)
            {
                // teleport to the right
                x += Program.MAP_WIDTH;
            }

            y += dy;
            // if went past bottom side
            if (y > Program.MAP_HEIGHT - 1)
            {
                // teleport to the top
                y -= Program.MAP_HEIGHT;
            }
            // if went past top side
            else if (y < 0)
            {
                // teleport to the bottom
                y += Program.MAP_HEIGHT;
            }
        }

        internal int GetQuadrant()
        {
            /*
             *    y
             * Q2 | Q1
             * ------- x
             * Q3 | Q4
             */
            if (x > Program.MAP_CENTERX && y < Program.MAP_CENTERY)
            {
                return 1;
            }
            else if (x < Program.MAP_CENTERX && y < Program.MAP_CENTERY)
            {
                return 2;
            }
            else if (x < Program.MAP_CENTERX && y > Program.MAP_CENTERY)
            {
                return 3;
            }
            else if (x > Program.MAP_CENTERX && y > Program.MAP_CENTERY)
            {
                return 4;
            }
            else
            {
                //not in any quadrant (on either axis or exactly in the center)
                return 0;
            }
        }
    }
}
